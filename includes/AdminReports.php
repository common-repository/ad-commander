<?php
namespace ADCmdr;

use ADCmdr\Vendor\WOAdminFramework\WOMeta;

/**
 * Admin Reports page and related functionality.
 */
class AdminReports extends Admin {
	/**
	 * The WordPress date display format.
	 *
	 * @var string
	 */
	private $date_display_format;

	/**
	 * Report data by date.
	 *
	 * @var array
	 */
	private $current_data_bydate;

	/**
	 * Report data by ad.
	 *
	 * @var array
	 */
	private $current_data_byad;

	/**
	 * Parsed input from filter.
	 *
	 * @var array
	 */
	private $input;

	/**
	 * Nonce array generated by parent Admin class.
	 *
	 * @var array
	 */
	public $nonce;

	/**
	 * __construct()
	 */
	public function __construct() {
		$this->nonce = $this->nonce( basename( __FILE__ ), 'reports' );
	}

	/**
	 * Create hooks.
	 *
	 * @return void
	 */
	public function hooks() {
		add_action( 'admin_init', array( $this, 'admin_init' ) );

		foreach ( $this->get_action_keys() as $key ) {
			$key_underscore = self::_key( $key );
			add_action( 'wp_ajax_' . $this->action_string( $key ), array( $this, 'action_' . $key_underscore ) );
		}
	}

	/**
	 * Fires on admin_init. Parse input if available.
	 *
	 * @return void
	 */
	public function admin_init() {
		$this->parse_input();
	}

	/**
	 * Enqueue scripts for the reports page.
	 *
	 * @return void
	 */
	public function enqueue() {
		$this->build_report_data();

		wp_enqueue_script( 'jquery' );
		wp_enqueue_script( 'jquery-ui-core' );
		wp_enqueue_script( 'jquery-ui-datepicker' );
		wp_enqueue_script( 'jquery-ui-autocomplete' );

		$this->enqueue_jquery_ui_styles();

		$handle = Util::ns( 'reports' );

		wp_register_script(
			$handle,
			AdCommander::assets_url() . 'js/reports.js',
			array(
				'jquery',
				'jquery-ui-core',
				'jquery-ui-datepicker',
				'jquery-ui-autocomplete',
			),
			AdCommander::version(),
			array( 'in_footer' => true )
		);

		wp_enqueue_script( $handle );

		Util::enqueue_script_data(
			$handle,
			array(
				'ajaxurl'         => admin_url( 'admin-ajax.php' ),
				'actions'         => $this->get_ajax_actions(),
				'reportData'      => $this->current_data_bydate,
				'adData'          => $this->current_data_byad,
				'tableByDateCols' => $this->table_by_date_columns(),
				'tableByAdCols'   => $this->table_by_ad_columns(),
				'chartType'       => $this->get_chart_type(),
			)
		);
	}

	/**
	 * Get necessary action keys, which will be used to create wp_ajax hooks.
	 *
	 * @return array
	 */
	private function get_action_keys() {
		return array(
			'get-ads-for-filter',
		);
	}

	/**
	 * Creates an array of all of the necessary actions.
	 *
	 * @return array
	 */
	private function get_ajax_actions() {
		$actions = array();

		foreach ( $this->get_action_keys() as $key ) {
			$actions[ self::_key( $key ) ] = array(
				'action'   => $this->action_string( $key ),
				'security' => wp_create_nonce( $this->nonce_string( $key ) ),
			);
		}

		return $actions;
	}

	/**
	 * Create HTML for the title of the page.
	 *
	 * @param string $title The title of the page.
	 *
	 * @return void
	 */
	private function title( $title ) {
		?>
		<div class="adcmdr-title-wrap">
		<?php $this->sf()->title( $title ); ?>			
		<div class="adcmdr-filter-field adcmdr-filter-field--chart_type">
				<?php
				$this->sf()->wo_forms->label( 'chart_type', __( 'Chart:', 'ad-commander' ) );
				$this->sf()->wo_forms->inputgroup( 'chart_type', $this->allowed_chart_types(), $this->get_chart_type(), 'radio', array( 'id' => 'adcmdr_chart_type' ) );
				?>
			</div>
		</div>
		<?php
	}

	/**
	 * Create the Reports page.
	 *
	 * @return void
	 */
	public function page() {
		$this->form_start();
		$this->form();

		$this->start_wrap();
		$this->title( __( 'Reports', 'ad-commander' ) );

		$this->chart();
		$this->form_end();
		$this->end_wrap();
		$this->start_wrap();

		$this->table_by_date();
		$this->table_by_ad();
		$this->end_wrap();
	}

	/**
	 * Create the HTML for the chart.
	 *
	 * @return void
	 */
	private function chart() {
		?>
		<div class="adcmdr-contain adcmdr-chart-contain">
			<canvas id="adcmdr_chart"></canvas>
		</div>
		<?php
	}

	/**
	 * Create the HTML for the by-date table.
	 */
	private function table_by_date() {
		?>
		<div class="adcmdr-contain-full">
			<h3><?php esc_html_e( 'By date', 'ad-commander' ); ?></h3>
			<div id="adcmdr_data_by_date" class="adcmdr-data-table"><?php esc_html_e( 'There is no data to display.', 'ad-commander' ); ?></div>
			<?php if ( $this->get_group_by() === 'week' ) : ?>
				<div class="adcmdr-footnote">
					<?php
					/* translators: %1$s: anchor tag with URL, %2$s the day of the week from settings, %3$s: close anchor tag */
					printf( esc_html( __( 'Week begins on %1$s%2$s%3$s', 'ad-commander' ) ), '<a href="' . esc_url( admin_url( 'options-general.php' ) ) . '">', esc_html( Util::first_day_of_the_week() ), '</a>' );
					?>
				</div>
			<?php endif; ?>
		</div>
		<?php
	}

	/**
	 * Create the HTML for the by-ad table.
	 */
	private function table_by_ad() {
		?>
		<div class="adcmdr-contain-full">
			<h3><?php esc_html_e( 'By ad', 'ad-commander' ); ?></h3>
			<div id="adcmdr_data_by_ad" class="adcmdr-data-table"><?php esc_html_e( 'There is no data to display.', 'ad-commander' ); ?></div>
		</div>
		<?php
	}

	/**
	 * Create the columns for the by-date table.
	 */
	private function table_by_date_columns() {
		return array(
			'date'        => ( $this->get_group_by() === 'hour' ) ? __( 'Hour', 'ad-commander' ) : __( 'Date', 'ad-commander' ),
			'impressions' => __( 'Impressions', 'ad-commander' ),
			'clicks'      => __( 'Clicks', 'ad-commander' ),
			'ctr'         => __( 'CTR', 'ad-commander' ),
		);
	}

	/**
	 * Create the columns for the by-ad table.
	 */
	private function table_by_ad_columns() {
		return array(
			'ad'          => __( 'Ad', 'ad-commander' ),
			'impressions' => __( 'Impressions', 'ad-commander' ),
			'clicks'      => __( 'Clicks', 'ad-commander' ),
			'ctr'         => __( 'CTR', 'ad-commander' ),
		);
	}

	/**
	 * Parse the input for later use.
	 */
	private function parse_input() {
		if ( ! isset( $_REQUEST[ $this->nonce['name'] ] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( sanitize_key( $_REQUEST[ $this->nonce['name'] ] ), $this->nonce['action'] ) ) {
			die( esc_html( __( 'Security check', 'ad-commander' ) ) );
		}

		$input = array();

		foreach ( array(
			'period',
			'group_by',
			'chart_type',
			'start_date',
			'end_date',
			'filter_by_ad_ids',
		) as $key ) {

			if ( ! isset( $_REQUEST[ $key ] ) ) {
				continue;
			}

			$value = ( is_array( $_REQUEST[ $key ] ) ) ? array_map( 'sanitize_text_field', wp_unslash( $_REQUEST[ $key ] ) ) : sanitize_text_field( wp_unslash( $_REQUEST[ $key ] ) );

			switch ( $key ) {
				case 'start_date':
				case 'end_date':
					$type = 'date';
					break;
				case 'filter_by_ad_ids':
					$type = 'ints';
					break;
				default:
					$type = 'str';
					break;
			}

			$value = $this->sanitize_by_type( $value, $type );

			$input[ $key ] = $value;
		}

		$this->input = $input;
	}

	/**
	 * Start of the form on the Reports page.
	 *
	 * @return void
	 */
	private function form_start() {
		?>
		<form method="get" action="<?php echo esc_url( self::reports_admin_url() ); ?>" class="adcmdr-filter" id="adcmdr_report_filter">
			<input type="hidden" name="page" value="<?php echo esc_attr( self::admin_slug( 'reports' ) ); ?>" />
			<?php
	}

	/**
	 * The fields of the form.
	 */
	private function form() {
		?>
		<div class="adcmdr-filter-form-content">
			<div class="adcmdr-filter-row">
				<div class="adcmdr-filter-field">
					<div class="adcmdr-filter-row">
						<div class="adcmdr-filter-field">
						<?php
							$this->sf()->wo_forms->label( 'period', __( 'Period', 'ad-commander' ) );
							$this->sf()->wo_forms->select( 'period', $this->allowed_periods( false ), $this->get_period(), array( 'id' => 'adcmdr_period' ) );
						?>
						</div>
						<div class="adcmdr-filter-field">
						<?php
							$this->sf()->wo_forms->label( 'group_by', __( 'Group By', 'ad-commander' ) );
							$this->sf()->wo_forms->select( 'group_by', $this->allowed_group_by( false ), $this->get_group_by(), array( 'id' => 'adcmdr_group_by' ) );
						?>
						</div>
						<div class="adcmdr-filter-field adcmdr-filter-field--submit">
							<input type="submit" value="<?php esc_attr_e( 'Refresh Data', 'ad-commander' ); ?>" class="button button-primary" id="adcmdr_filter_submit" />
						</div>
					</div>
					<div class="adcmdr-filter-row adcmdr-mode-restrict adcmdr-mode-restrict--custom">
						<div class="adcmdr-filter-field">
							<?php
							$this->sf()->wo_forms->label( 'start_date', __( 'Start Date', 'ad-commander' ) );
							$this->sf()->wo_forms->input(
								'start_date',
								$this->get_start_date(),
								'text',
								array(
									'id'      => 'adcmdr_start_date',
									'classes' => 'adcmdr-datepicker',
								)
							);
							?>
						</div>
						<div class="adcmdr-filter-field">
							<?php
							$this->sf()->wo_forms->label( 'end_date', __( 'End Date', 'ad-commander' ) );
							$this->sf()->wo_forms->input(
								'end_date',
								$this->get_end_date(),
								'text',
								array(
									'id'      => 'adcmdr_end_date',
									'classes' => 'adcmdr-datepicker',
								)
							);
							?>
						</div>
					</div>
				</div>
				<div class="adcmdr-filter-field adcmdr-filter-field-col adcmdr-filter-field--filter-ads">
					<div>
						<?php
						$this->sf()->wo_forms->label( 'filter_by_ads', __( 'Filter By Ads', 'ad-commander' ) );
						$this->sf()->wo_forms->input(
							'filter_by_ads',
							'',
							'text',
							array(
								'id'          => 'adcmdr_filter_by_ads',
								'placeholder' => __( 'Search by ad title', 'ad-commander' ),
							)
						);
						$filtered_ads = $this->get_filtered_ads();
						?>
					</div>
					<ul id="selected_filter_ads" class="adcmdr-remove-controls">
						<?php
						if ( $filtered_ads ) :
							foreach ( $filtered_ads as $ad ) :
								?>
							<li>
								<button class="adcmdr-filter-remove-ad adcmdr-remove" data-adid="<?php echo absint( $ad['id'] ); ?>" disabled>
									<span><?php echo esc_html( $ad['title'] ); ?></span>
									<i class="dashicons dashicons-minus"></i>
								</button>
							</li>
								<?php
							endforeach;
						endif;
						?>
					</ul>
					<input type="hidden" name="filter_by_ad_ids" value="<?php echo esc_attr( implode( ',', $this->get_filtered_ad_ids() ) ); ?>" />
				</div>
			</div>
		</div>
			<?php
	}

	/**
	 * End of the reports form.
	 */
	private function form_end() {
		$this->sf()->message( '<em>' . __( 'Some stats may take a minute to update.', 'ad-commander' ) . '</em>' );
		$this->nonce_field( $this->nonce );
		?>
		</form>
		<?php
	}

	/**
	 * Display dates using the WordPress format.
	 */
	private function date_display_format() {
		if ( ! $this->date_display_format ) {
			if ( $this->get_group_by() !== 'hour' ) {
				$this->date_display_format = get_option( 'date_format' );
			} else {
				$this->date_display_format = get_option( 'time_format' );
			}
		}

		return $this->date_display_format;
	}

	/**
	 * Alternate display format for dates.
	 *
	 * @param string $format The date format to modify.
	 */
	private function date_display_format_alt( $format ) {
		return str_replace( array( 'F ', ', Y' ), array( 'M ', ', \'y' ), $format );
	}

	/**
	 * The allowed time periods and their related info.
	 *
	 * @param bool $detailed Whether to return a detailed array or not.
	 *
	 * @return array
	 */
	private function allowed_periods( $detailed = true ) {
		$periods = array(
			'today'         => array(
				'text'     => __( 'Today', 'ad-commander' ),
				'modifier' => '',
			),
			'yesterday'     => array(
				'text'     => __( 'Yesterday', 'ad-commander' ),
				'modifier' => '',
			),
			'this_week'     => array(
				'text'     => __( 'This Week', 'ad-commander' ),
				'modifier' => 'this week',
			),
			'this_month'    => array(
				'text'     => __( 'This Month', 'ad-commander' ),
				'modifier' => 'first day of this month',
			),
			'this_year'     => array(
				'text'     => __( 'This Year', 'ad-commander' ),
				'modifier' => 'first day of January',
			),
			'last_week'     => array(
				'text'     => __( 'Last Week', 'ad-commander' ),
				'modifier' => 'last week',
			),
			'last_month'    => array(
				'text'     => __( 'Last Month', 'ad-commander' ),
				'modifier' => 'last month',
			),
			'last_year'     => array(
				'text'     => __( 'Last Year', 'ad-commander' ),
				'modifier' => 'last year',
			),
			'past_7_days'   => array(
				'text'     => __( 'Past 7 days', 'ad-commander' ),
				'modifier' => '-6 days',
			),
			'past_14_days'  => array(
				'text'     => __( 'Past 14 days', 'ad-commander' ),
				'modifier' => '-13 days',
			),
			'past_30_days'  => array(
				'text'     => __( 'Past 30 days', 'ad-commander' ),
				'modifier' => '-29 days',
			),
			'past_365_days' => array(
				'text'     => __( 'Past 365 days', 'ad-commander' ),
				'modifier' => '-364 days',
			),
			'custom'        => array(
				'text'     => __( 'Custom', 'ad-commander' ),
				'modifier' => '',
			),
		);

		if ( ! $detailed ) {
			$periods_simple = array();
			foreach ( $periods as $key => $value ) {
				$periods_simple[ $key ] = $value['text'];
			}

			return $periods_simple;
		}

		return $periods;
	}

	/**
	 * The allowed group_by keys and their related info.
	 *
	 * @param bool $detailed Whether to return a detailed array or not.
	 *
	 * @return array
	 */
	private function allowed_group_by( $detailed = true ) {
		$periods = array(
			'hour'  => array(
				'text'     => __( 'Hour', 'ad-commander' ),
				'modifier' => '+1 hour',
			),
			'day'   => array(
				'text'     => __( 'Day', 'ad-commander' ),
				'modifier' => '+1 day',
			),
			'week'  => array(
				'text'     => __( 'Week', 'ad-commander' ),
				'modifier' => '+1 week',
			),
			'month' => array(
				'text'     => __( 'Month', 'ad-commander' ),
				'modifier' => '+1 month',
			),
		);

		if ( ! $detailed ) {
			$periods_simple = array();
			foreach ( $periods as $key => $value ) {
				$periods_simple[ $key ] = $value['text'];
			}

			return $periods_simple;
		}

		return $periods;
	}

	/**
	 * The allowed chart types.
	 *
	 * @return array
	 */
	private function allowed_chart_types() {
		return array(
			'line' => 'Line',
			'bar'  => 'Bar',
		);
	}

	/**
	 * Returns a modifier string for a time period if one exists.
	 *
	 * @param string $period The period to find the modifier for.
	 *
	 * @return null|string
	 */
	private function datetime_modifier_string( $period ) {
		$periods = $this->allowed_periods();

		return isset( $periods[ $period ]['modifier'] ) ? $periods[ $period ]['modifier'] : null;
	}

	/**
	 * Returns the ad IDs that we are filtering by, if any.
	 *
	 * @return array
	 */
	private function get_filtered_ad_ids() {
		if ( isset( $this->input['filter_by_ad_ids'] ) ) {
			return Util::arrayify( $this->input['filter_by_ad_ids'] );
		}
		return array();
	}

	/**
	 * Gets an array of ads based on selected filters.
	 *
	 * @return array
	 */
	private function get_filtered_ads() {
		$ads          = $this->get_ads_for_filter();
		$filtered_ads = array();

		foreach ( $ads as $ad ) {
			if ( in_array( $ad['id'], $this->get_filtered_ad_ids() ) ) {
				$filtered_ads[] = $ad;
			}
		}

		return $filtered_ads;
	}

	/**
	 * Gets the current filtered period.
	 *
	 * @return string
	 */
	private function get_period() {
		if ( isset( $this->input['period'] ) && in_array( $this->input['period'], array_keys( $this->allowed_periods() ) ) ) {
			return $this->input['period'];
		}

		return 'past_7_days';
	}

	/**
	 * Gets the current filtered group_by.
	 *
	 * @return string
	 */
	private function get_group_by() {
		if ( isset( $this->input['group_by'] ) && in_array( $this->input['group_by'], array_keys( $this->allowed_group_by() ) ) ) {
			return $this->input['group_by'];
		}

		return 'day';
	}

	/**
	 * Gets the current chart type.
	 *
	 * @return string
	 */
	private function get_chart_type() {
		if ( isset( $this->input['chart_type'] ) && in_array( $this->input['chart_type'], array_keys( $this->allowed_chart_types() ) ) ) {
			return $this->input['chart_type'];
		}

		return 'line';
	}

	/**
	 * Gets the current filtered start date.
	 *
	 * @return string|null
	 */
	private function get_start_date() {
		if ( isset( $this->input['start_date'] ) && $this->get_period() === 'custom' ) {
			return $this->input['start_date'];
		}
		return null;
	}

	/**
	 * Gets the current filtered end date.
	 *
	 * @return string|null
	 */
	private function get_end_date() {
		if ( isset( $this->input['end_date'] ) && $this->get_period() === 'custom' ) {
			return $this->input['end_date'];
		}
		return null;
	}

	/**
	 * Gets the modifier string for a group_by string.
	 *
	 * @param string $group_by The period we're grouping by.
	 *
	 * @return string
	 */
	private function get_group_by_modifier( $group_by ) {
		switch ( $group_by ) {
			case 'month':
				$modifier = 'first day of next month';
				break;
			case 'week':
				$modifier = 'next ' . Util::first_day_of_the_week();
				break;

			case 'hour':
				$modifier = 'next hour';
				break;
			case 'day':
			default:
				$modifier = 'next day';
				break;
		}

		return $modifier;
	}

	/**
	 * Creates an array of dates from a start and an end date.
	 *
	 * @param array  $start_end_dates Array containing two DateTime objects.
	 * @param string $group_by Determines the frequency of the range of dates.
	 * @param bool   $include_end_date Whether to include the end date or not.
	 *
	 * @return array
	 */
	private function range_of_start_dates( $start_end_dates, $group_by = 'day', $include_end_date = true ) {
		$start_date = clone $start_end_dates['start_date'];
		$end_date   = clone $start_end_dates['end_date'];

		if ( $include_end_date ) {
			$end_date = $end_date->modify( '+1 day' ); // So that $end_date is included in our DatePeriod
		}

		if ( $group_by === 'hour' ) {
			$now = Util::datetime_wp_timezone( current_time( 'Y-m-d H:00:00' ) );
			$now->modify( 'next hour' )->modify( '-1 second' );

			if ( $end_date->getTimestamp() > $now->getTimestamp() ) {
				$end_date = clone $now;
			}
		}

		$modifier = $this->get_group_by_modifier( $group_by );

		$periods = array();
		$date    = clone $start_date;
		while ( $date->getTimestamp() < $end_date->getTimestamp() ) {
			$periods[] = clone $date;
			$date      = $date->modify( $modifier );
		}

		$dates      = array();
		$format     = $this->date_display_format();
		$format_alt = $this->date_display_format_alt( $format );

		foreach ( $periods as $key => $value ) {
			$timestamp           = $value->getTimestamp();
			$value_formatted     = $value->format( $format );
			$value_formatted_alt = $value->format( $format_alt );

			$dates[] = array(
				'display_format'     => $value_formatted,
				'display_format_alt' => $value_formatted_alt,
				'timestamp'          => $timestamp,
				'datetime'           => $value,
			);
		}

		return $dates;
	}

	/**
	 * Creates start and end dates for a given period.
	 *
	 * @param string $period The period for which we are getting start and end dates.
	 *
	 * @return array
	 */
	private function start_end_dates( $period ) {

		if ( $period === 'custom' ) {
			$start_date_custom = $this->get_start_date();
			$end_date_custom   = $this->get_end_date();

			if ( ! $start_date_custom || ! $end_date_custom ) {
				return false;
			}

			$start_date = Util::datetime_wp_timezone( $start_date_custom )->modify( 'today' );
			$end_date   = Util::datetime_wp_timezone( $end_date_custom )->modify( 'today' );
		} else {
			$now = current_time( 'Y-m-d H:i:s' );
			$now = Util::datetime_wp_timezone( $now )->modify( 'today' );

			$end_date = clone $now;

			if ( $period === 'yesterday' ) {
				$end_date = $end_date->modify( '-1 day' );
			}

			$start_date = clone $end_date;
		}

		$modifier = $this->datetime_modifier_string( $period );

		if ( $modifier ) {
			if ( $modifier === 'this week' ) {
				$start_week = Util::first_day_of_the_week();
				$today      = clone $now;

				/**
				 * If the week starts today, end date and start date are the same.
				 */
				if ( $today->format( 'l' ) !== $start_week ) {
					$start_date->modify( 'last ' . $start_week );
				}
			} elseif ( $modifier === 'last week' ) {
				$start_week = Util::first_day_of_the_week();
				if ( $end_date->format( 'l' ) === $start_week ) {
					$end_date->modify( '-1 day' );
				} else {
					$end_date->modify( 'last ' . $start_week )->modify( '-1 day' );
				}

				$end_date->modify( 'today' );

				$start_date = clone $end_date;
				$start_date->modify( '-6 days' );
			} elseif ( $modifier === 'last month' ) {
				$end_date->modify( 'last day of last month' )->modify( 'today' );

				$start_date = clone $end_date;
				$start_date->modify( 'first day of this month' );
			} elseif ( $modifier === 'last year' ) {
				$end_date->modify( 'last year December 31' )->modify( 'today' );

				$start_date = clone $end_date;
				$start_date->modify( 'this year January 1' );
			} else {
				$start_date = $start_date->modify( $modifier );
			}
		}

		$start_date->modify( 'today' );

		/**
		 * Return set of dates
		 */
		return array(
			'start_date' => $start_date,
			'end_date'   => $end_date,
		);
	}

	/**
	 * The name of the transient that stores our filtered ads.
	 *
	 * @return string
	 */
	public static function filter_ads_transient() {
		return Util::ns( 'report_filter_ads', '_' );
	}

	/**
	 * Store the available filter ads in a transient so we don't have to query them every time.
	 *
	 * @return array
	 */
	private function get_ads_for_filter() {

		$ads = get_transient( self::filter_ads_transient() );

		if ( $ads === false ) {
			$available_ads = Query::ads( 'post_title', 'asc', Util::any_post_status(), array(), array() );

			$ads = array();

			if ( ! empty( $available_ads ) ) {
				foreach ( $available_ads as $ad ) {
					$ads[] = array(
						'id'    => $ad->ID,
						'title' => $ad->post_title,
					);
				}
			}

			set_transient( self::filter_ads_transient(), $ads, MINUTE_IN_SECONDS );
		}

		return $ads;
	}

	/**
	 * Wp_ajax hook. Gets all of the ads for use in the filter.
	 *
	 * @return void
	 */
	public function action_get_ads_for_filter() {
		$action = 'get-ads-for-filter';

		check_ajax_referer( $this->nonce_string( $action ), 'security' );

		if ( ! current_user_can( AdCommander::capability() ) ) {
			wp_die();
		}

		wp_send_json_success(
			array(
				'action' => $action,
				'ads'    => $this->get_ads_for_filter(),
			)
		);

		wp_die();
	}

	/**
	 * Get the total stats for a given day or days.
	 *
	 * @param array      $ad_ids The ad IDs to total stats for.
	 * @param string|int $days Either 'all' or the number of days to look back when totaling.
	 * @param string     $type The type of stat to count.
	 *
	 * @return int
	 */
	public function ad_stats( $ad_ids, $days = 'all', $type = 'impressions' ) {
		if ( $days === 'all' ) {
			return TrackingLocal::total_stats( $ad_ids, $type, null, null );
		}

		$end_date = Util::datetime_wp_timezone( current_time( 'Y-m-d H:00:00' ) );
		$end_date->modify( 'next hour' )->modify( '-1 second' );

		$days = ( intval( $days ) - 1 );
		if ( $days < 0 ) {
			$days = 0;
		}

		$start_date = clone $end_date;
		$start_date->modify( '-' . $days . ' days' )->modify( 'today' );

		return TrackingLocal::total_stats( $ad_ids, $type, $start_date->getTimestamp(), $end_date->getTimestamp() );
	}

	/**
	 * Builds the data for display on the report page.
	 *
	 * @return void
	 */
	private function build_report_data() {
		$this->current_data_bydate = array();
		$this->current_data_byad   = array();
		$notice                    = null;

		$period          = $this->get_period();
		$start_end_dates = $this->start_end_dates( $period );

		if ( ! isset( $start_end_dates['start_date'] ) || ! isset( $start_end_dates['end_date'] ) || ! $start_end_dates['start_date'] || ! $start_end_dates['end_date'] ) {
			$notice = __( 'There was an error processing your start and end dates.', 'ad-commander' );
		}

		if ( $start_end_dates['start_date'] > $start_end_dates['end_date'] ) {
			$notice = __( 'The selected start date is before the end date.', 'ad-commander' );
		}

		if ( $notice ) {
			add_action(
				'admin_notices',
				function () use ( $notice ) {
					?>
					<div class="notice notice-error is-dismissible">
						<p><?php echo esc_html( $notice ); ?></p>
					</div>
					<?php
				}
			);

			return;
		}

		$group_by         = $this->get_group_by();
		$start_date_range = $this->range_of_start_dates( $start_end_dates, $group_by );

		$i            = 0;
		$parsed_dates = array();

		foreach ( $start_date_range as $date ) {
			$start_timestamp = $date['timestamp'];

			if ( isset( $start_date_range[ $i + 1 ]['datetime'] ) ) {
				$end_datetime = clone $start_date_range[ $i + 1 ]['datetime'];
				$end_datetime->modify( '-1 second' );
			} else {
				$end_datetime = clone $start_end_dates['end_date'];
				$end_datetime->modify( 'tomorrow' )->modify( '-1 second' );
			}

			$impressions = TrackingLocal::total_impressions( $this->get_filtered_ad_ids(), $start_timestamp, $end_datetime->getTimestamp(), false );
			$clicks      = TrackingLocal::total_clicks( $this->get_filtered_ad_ids(), $start_timestamp, $end_datetime->getTimestamp(), false );

			$display_formatted = $date['display_format'];

			if ( $group_by !== 'hour' && $date['datetime']->format( $this->date_display_format() ) !== $end_datetime->format( $this->date_display_format() ) ) {
				$display_formatted = $date['datetime']->format( $this->date_display_format() ) . ' – ' . $end_datetime->format( $this->date_display_format() );
			}

			$parsed_dates[] = array(
				'date'        => $display_formatted, // . ' - ' . $start_timestamp . ' - ' . $end_datetime->getTimestamp(), // For testing
				'date_alt'    => $date['display_format_alt'],
				'timestamp'   => $date['timestamp'],
				'impressions' => $impressions,
				'clicks'      => $clicks,
				'ctr'         => Util::ctr( $clicks, $impressions ),
			);

			++$i;
		}

		$this->current_data_bydate = $parsed_dates;

		$parsed_ads = array();
		$ad_ids     = TrackingLocal::ads_with_stats( $start_date_range[0]['timestamp'], $end_datetime->getTimestamp(), $this->get_filtered_ad_ids() );

		if ( ! empty( $ad_ids ) ) {
			$ads = Query::ads( 'post_title', 'asc', Util::any_post_status(), array(), array(), $ad_ids );

			foreach ( $ad_ids as $ad_id ) {

				$impressions = TrackingLocal::total_impressions( $ad_id, $start_date_range[0]['timestamp'], $end_datetime->getTimestamp(), false );
				$clicks      = TrackingLocal::total_clicks( $ad_id, $start_date_range[0]['timestamp'], $end_datetime->getTimestamp(), false );

				$this_ad = new \stdClass();
				foreach ( $ads as $ad ) {
					if ( $ad->ID === $ad_id ) {
						$this_ad = $ad;
						break;
					}
				}

				$parsed_ads[] = array(
					/* translators: %d: Ad id */
					'ad'          => isset( $this_ad->post_title ) ? $this_ad->post_title : sprintf( __( 'Ad not found (ID: %d)', 'ad-commander' ), $ad_id ),
					'edit_link'   => isset( $this_ad->post_title ) ? Admin::edit_ad_post_url( $this_ad->ID, $this_ad->post_status ) : null,
					'impressions' => $impressions,
					'clicks'      => $clicks,
					'ctr'         => Util::ctr( $clicks, $impressions ),
				);
			}
		}

		if ( ! empty( $parsed_ads ) ) {
			usort(
				$parsed_ads,
				function ( $a, $b ) {
					if ( $a['edit_link'] === null ) {
						return PHP_INT_MAX;
					}

					return $a['ad'] <=> $b['ad'];
				}
			);
		}

		$this->current_data_byad = $parsed_ads;
	}
}
